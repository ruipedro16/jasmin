param int N = 32;

struct ctx {
    reg ptr u8[N] pub_seed,
    reg ptr u8[N] sk_seed,
    stack usize foo
};


#[returnaddress="stack"]
fn map<WORD_SIZE, INLEN>(
    reg ptr WORD_SIZE[INLEN] out
    // (fn: reg T -> reg T) func
) -> reg ptr WORD_SIZE[INLEN] {
    inline int i;
    reg WORD_SIZE t;

    for i=0 to INLEN {
        t = out[i];
        #inline t = func<T, U>(t); // func is a local function but here we inline it
        out[i] = t;
    }

    return out;
}

// Structs are not yet accepted by the parser as arguments of functions
export 
fn foo<T, U>(/* struct ctx bar*/ ) -> reg usize {
    reg usize r = 12;
    return r;
}

export fn bar() -> reg usize {
    reg usize r = 12;
    return r;
}

/* FOw now, FUNCTION AS ARGUMENTS ARE ONLT SUPPORTED IN TEMPLATE FUNCTIONS */
#[returnaddress="stack"]
fn map<INLEN>(
    reg ptr u8[INLEN] out,
    (fn: reg u8 -> reg u8) func
) -> reg ptr u8[INLEN] {
    inline int i;
    reg u8 t;

    for i=0 to INLEN {
        t = out[i];
        t = func(t);
        out[i] = t;
    }

    return out;
}
